package com.capgemini.librarymanagementsystemhibernate.dao;

import com.capgemini.librarymanagementsystemhibernate.dto.BookBean;

public interface AdminDAO {
	
	boolean addBook(BookBean info);
	boolean remove(int bookId);
	@Override
	public boolean issueBook(int id , int book_id) {
		EntityManagerFactory factory = null;
		EntityManager manager = null;
		EntityTransaction transaction = null;
		BookIssueDetails b = new BookIssueDetails();
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			Query q = manager.createQuery("select b from BookBean b where b.bid = :bbid and b.copies>=1");
			Query	ss = q.setParameter("bbid", book_id);
			List count = ss.getResultList();
			System.out.println(count);
			int S = count.size();
			if(S>=1) {
				Query q1 = manager.createQuery("select r from RequestBook r where r.id = :id and r.reqBookPK.bid = :bid");
				 q1.setParameter("id", id);
			 q1.setParameter("bid", book_id);
				List count1 = q1.getResultList();
				int s = count1.size();
				System.out.println(s);
				if(s>=1) {
					Query q2 = manager.createQuery("select count(id) as idCount from BorrowedBookBean b where id=:id");
					q2.setParameter("id", id);
					List count2 = q2.getResultList();
					int s1 = count2.size();
					if(s1>=1) {
						int noOfBooksBorrowed =  count2.indexOf(0);
						if(noOfBooksBorrowed<3) {
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
							LocalDate date = LocalDate.now();
							Calendar c = Calendar.getInstance();
								c.setTime(new java.util.Date());
								c.add(Calendar.DATE, 15);
								String date1 =	sdf.format(c.getTime());
								Query userEmail = manager.createQuery("select u.email from UserBean u  where id = :id");
								userEmail.setParameter("id", id);
								List userEmail1 = userEmail.getResultList();
							Query q3 = manager.createNativeQuery("insert into bookissue1 (id,bid,email,issueDate,returnDate) values (? , ? , ? , ? , ?) ");
							q3.setParameter(1, id);
							q3.setParameter(2 , book_id);
							q3.setParameter(3, userEmail1.get(0));
							q3.setParameter(4, date);
							q3.setParameter(5, date1);
							int count3 = q3.executeUpdate();
							if(count3 != 0) {
								Query userEmail4 = manager.createQuery("select u.email from UserBean u where id = :id");
								userEmail4.setParameter("id", id);
								List userEmail44 = userEmail4.getResultList();
								Query q4 = manager.createNativeQuery("insert into borrowbook1 (id,bid,email) values (?,?,?)");
								q4.setParameter(1, id);
								q4.setParameter(2, book_id);
								q4.setParameter(3, userEmail44.get(0));
								q4.executeUpdate();
							
							Query q5 = manager.createQuery("delete from RequestBook r where r.id = :id and r.reqBookPK.bid = :bid");
							q5.setParameter("id", id);
							q5.setParameter("bid", book_id);
							q5.executeUpdate();
							Query q6 = manager.createQuery("update BookBean b set b.copies = b.copies-1 where b.bid = :bid");
							q6.setParameter("bid", book_id);
							q6.executeUpdate();
							transaction.commit();
							return true;
							}
							
						}
						
						
					}
				}
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		manager.close();
		factory.close();
		
		return false;
	}


	
}
