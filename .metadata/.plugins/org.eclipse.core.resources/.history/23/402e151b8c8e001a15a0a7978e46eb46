package com.capgemini.librarymanagementsystemjdbc.controller;

import java.util.InputMismatchException;
import java.util.Scanner;

import com.capgemini.librarymanagementsystemjdbc.dto.BookBean;
import com.capgemini.librarymanagementsystemjdbc.dto.UserBean;
import com.capgemini.librarymanagementsystemjdbc.exception.LibraryManagementException;
import com.capgemini.librarymanagementsystemjdbc.dao.AdminDAOImp;
import com.capgemini.librarymanagementsystemjdbc.dao.StudentDAOImp;
import com.capgemini.librarymanagementsystemjdbc.dao.UserDAOImp;
import com.capgemini.librarymanagementsystemjdbc.factory.AdminFactory;
import com.capgemini.librarymanagementsystemjdbc.factory.StudentFactory;
import com.capgemini.librarymanagementsystemjdbc.factory.UserFactory;
import com.capgemini.librarymanagementsystemjdbc.service.AdminService;
import com.capgemini.librarymanagementsystemjdbc.service.StudentService;
import com.capgemini.librarymanagementsystemjdbc.service.UserService;
import com.capgemini.librarymanagementsystemjdbc.validation.LibraryManagementValidation;

public class JdbcController {
	public static void main(String[] args) {
		doReg();
	}

	public static void doReg() {

		boolean flag = false;

		String regName = null;
		String regEmail = null;
		String regPassword = null;
		long regMobile = 0;

		LibraryManagementValidation validation = new LibraryManagementValidation();

		Scanner scanner = new Scanner(System.in);
		do {
			System.out.println("Press 1 to Register");
			System.out.println("Press 2 to Login");
			UserService service1 = UserFactory.getUserService();
			AdminService service = AdminFactory.getAdminService();

			int i = scanner.nextInt();
			switch(i) {

			case 1:

				do {
					try {
						System.out.println("Enter Name");
						regName = scanner.next();
						validation.validatedName(regName);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Name should be in alphabets only");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				do {
					try {
						System.out.println("Enter Email");
						regEmail = scanner.next();
						validation.validatedEmail(regEmail);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Email should be in proper format");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				do {
					try {	
						System.out.println("Enter Password");
						regPassword = scanner.next();
						validation.validatedPassword(regPassword);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Enter correct password");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				do {
					try {
						System.out.println("Enter Mobile");
						regMobile = scanner.nextLong();
						validation.validatedMobile(regMobile);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Mobile number should have 10 digits");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				System.out.println("Enter Role");
				String regRole = scanner.next();
				System.out.println("Enter ID");
				int regID = scanner.nextInt();

				UserBean bean = new UserBean();
				bean.setId(regID);
				bean.setName(regName);
				bean.setMobile(regMobile);
				bean.setEmail(regEmail);
				bean.setPassword(regPassword);
				bean.setRole(regRole);
				try {
					int check = service1.register(bean);
					if(check == 0) {
						System.out.println("Email already exist");

					} else {
						System.out.println("Registered succesfully");

					}}catch(Exception e) {
						System.out.println("Invalid Credentials");
					}

				break;
			case 2:

				System.out.println("Enter Email");
				String email = scanner.next();
				System.out.println("Enter Password");
				String password = scanner.next();
				try {
					String auth = service1.auth(email, password);

					if(auth.equalsIgnoreCase("admin")) {

						admin();

					}else if(auth.equalsIgnoreCase("student")){
						student();
					}

					else {
						System.out.println("Invalid Email or Password");
					}
				}catch(Exception e) {
					System.out.println("Invalid Email or Password");
				}

				break;
			}
		}while(true);	
	}



	public static void admin() {
		UserService service1 = UserFactory.getUserService();
		AdminService service = AdminFactory.getAdminService();

		boolean flag = false;

		int bookId = 0;
		String bookName = null;
		String bookAuthor = null;
		String bookCategory = null;
		String bookPubName = null;
		
		int book_Id = 0;
		int issueBook = 0;
		String issuedStudentMail = null;
		
		LibraryManagementValidation validation1 = new LibraryManagementValidation();

		Scanner scanner = new Scanner(System.in);
		do {
			System.out.println("Press 1 to Add a Book");
			System.out.println("Press 2 to Remove a Book");
			System.out.println("Press 3 to Issue book");
			System.out.println("Press 4 to Main");

			int choice1 = scanner.nextInt();
			switch (choice1) {
			case 1:

				do {
					try {
						System.out.println("Enter ID");
						bookId = scanner.nextInt();
						validation1.validatedId(bookId);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Id should contains only 2 digits");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				do {
					try {
						System.out.println("Enter Book Name"); 
						bookName = scanner.next();
						validation1.validatedName(bookName);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Book Name should be in alphabets only");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				do {
					try {
						System.out.println("Enter Author Name"); 
						bookAuthor = scanner.next();

						validation1.validatedName(bookAuthor);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Book Author should be in alphabets only");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				do {
					try {
						System.out.println("Enter Category");
						bookCategory = scanner.next();
						validation1.validatedName(bookCategory);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Book Category should be in alphabets only");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);

				do {
					try {	
						System.out.println("Enter Publisher Name");
						bookPubName =  scanner.next();
						validation1.validatedName(bookPubName);
						flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Book Publisher Name should be in alphabets only");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				}while(!flag);


				BookBean bean2 = new BookBean();

				bean2.setBookId(bookId); 
				bean2.setBookName(bookName);
				bean2.setBookCategory(bookCategory);
				bean2.setBookAuthor(bookAuthor);
				bean2.setBookPublisher(bookPubName);

				int check = service.addBook(bean2);
				if(check==0) {
					System.out.println("Book already exists");
				} else {
					System.out.println("Book is added successfully");
				}
				break;

			case 2:
				
				do {
				try {
				System.out.println("Enter Book Id");
				book_Id = scanner.nextInt();
				validation1.validatedId(book_Id);
				flag = true;
				}catch(InputMismatchException e) {
					flag = false;
					System.err.println("");
				}catch(LibraryManagementException e) {
					flag = false;
					System.err.println(e.getMessage());
				}
				}while(!flag);
				
				if (book_Id == 0) {
					System.out.println("Enter the Valid Book Id");
				} else {
					BookBean bean6 = new BookBean();

					bean6.setBookId(book_Id);
					int removed = service.remove(book_Id);
					if (removed == 0) {
						System.out.println("Book is not removed");
					} else {
						System.out.println("Book is removed successfully");
					}
				}

				break;

			case 3:
				
				do {
				try {
				System.out.println("Enter Book Id");
				issueBook = scanner.nextInt();
				
				validation1.validatedId(issueBook);
				flag = true;
				}catch(InputMismatchException e) {
					flag = false;
					System.err.println("Id should contains only 2 digits");
				}catch(LibraryManagementException e) {
					flag = false;
					System.err.println(e.getMessage());
				}
				}while(!flag);
				
				
				do {
				try {
				System.out.println("Enter Student Email Id");
				issuedStudentMail = scanner.next();
				
				validation1.validatedEmail(issuedStudentMail);
				flag = true;
				}catch(InputMismatchException e) {
					flag = false;
					System.err.println("Email should be in proper format");
				}catch(LibraryManagementException e) {
					flag = false;
					System.err.println(e.getMessage());
				}
				}while(!flag);
				
				boolean isIssued = service.issueBook(issueBook,issuedStudentMail);
				if(isIssued) {
					System.out.println("Book is Issued successfully");

				}
				else {
					System.out.println("Book is not Issued");
				}

				break;

			}
		}while(true);
	}

	public static void student() {
	
		boolean flag = false;
		int reqBook = 0;
		int searchBookId = 0;
		int returned = 0;

		LibraryManagementValidation validation2 = new LibraryManagementValidation();
		
		Scanner scanner = new Scanner(System.in);
		UserService service1 = UserFactory.getUserService();
		AdminService service = AdminFactory.getAdminService();
		StudentService service2 = StudentFactory.getStudentService();
		StudentDAOImp dao = new StudentDAOImp();
		AdminDAOImp adao = new AdminDAOImp();
		UserDAOImp udao = new UserDAOImp();
		do {
			try {

				System.out.println("Press 1 to Request a Book");
				System.out.println("Press 2 to Search Book by Id");
				System.out.println("Press 3 to Return the Book");
				System.out.println("Press 4 to main");


				int choice2 = scanner.nextInt();
				switch (choice2) {

				case 1:

					do {
					try {
					System.out.println("Enter Book Id"); 
					reqBook = scanner.nextInt();
					validation2.validatedId(reqBook);
					flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Id should contains only 2 digits");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
					}while(!flag);
					

					boolean book = service2.req(reqBook,null); 
					if(book) {

						adao.issueBook(reqBook, null);
						System.out.println("Book is Requested Successfully");
					}else {
						System.out.println("Sorry, No book is available for the request");
					}

					break;

				case 2:

					
					do {
					try {
					System.out.println("Enter Book Id");
					searchBookId = scanner.nextInt();
					
					validation2.validatedId(searchBookId);
					flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Id should contains only 2 digits");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
					}while(!flag);
					
					
					BookBean bean5 = new BookBean();
					bean5.setBookId(searchBookId);
					BookBean list2 = service2.searchBookType(searchBookId);
					if(list2!=null) {
						System.out.println(list2.getBookId());
						System.out.println(list2.getBookName());
						System.out.println(list2.getBookAuthor());
						System.out.println(list2.getBookCategory());
						System.out.println(list2.getBookPublisher());
					} else {
						System.out.println("Sorry, No book is available for the request");
					}
					break;

				case 3:
					
					do {
					try {
					System.out.println("Enter Book Id");
					returned = scanner.nextInt();
					
					validation2.validatedId(returned);
					flag = true;
					}catch(InputMismatchException e) {
						flag = false;
						System.err.println("Id should contains only 2 digits");
					}catch(LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
					}while(!flag);
					
					
					boolean returnBook = service2.returnBook(returned);
					if(returnBook) {
						System.out.println("Book is returned");
					}else {
						System.out.println("Book is not returned");
					}
					break;

				case 4:
					doReg();
					break;
				default:
					break;
				}
			} catch (Exception e) {
				System.out.println("Invalid Credentials");
			}

		}while(true);
	}	
}
