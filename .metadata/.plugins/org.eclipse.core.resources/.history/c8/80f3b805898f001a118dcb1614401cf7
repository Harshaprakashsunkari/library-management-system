package com.capgemini.librarymanagementsystemhibernate.controller;

import java.util.InputMismatchException;
import java.util.Scanner;

import com.capgemini.librarymanagementsystemhibernate.dao.AdminDAO;
import com.capgemini.librarymanagementsystemhibernate.dao.AdminDAOImp;
import com.capgemini.librarymanagementsystemhibernate.dto.BookBean;
import com.capgemini.librarymanagementsystemhibernate.dto.UserBean;
import com.capgemini.librarymanagementsystemhibernate.exception.LibraryManagementException;
import com.capgemini.librarymanagementsystemhibernate.factory.AdminFactory;
import com.capgemini.librarymanagementsystemhibernate.factory.StudentFactory;
import com.capgemini.librarymanagementsystemhibernate.factory.UserFactory;
import com.capgemini.librarymanagementsystemhibernate.service.AdminService;
import com.capgemini.librarymanagementsystemhibernate.service.StudentService;
import com.capgemini.librarymanagementsystemhibernate.service.UserService;
import com.capgemini.librarymanagementsystemhibernate.validation.LibraryManagementValidation;

public class HibernateController {
	public static void main(String[] args) {
		doReg();
	}

	public static void doReg() {

		boolean flag = false;

		int regId = 0;
		String regName = null;
		String regEmail = null;
		String regPassword = null;
		long regMobile = 0;

		String email = null;
		String password = null;

		LibraryManagementValidation validation = new LibraryManagementValidation();
		Scanner scanner = new Scanner(System.in);
		do {
			System.out.println("Press 1 to Register");
			System.out.println("Press 2 to Login");
			UserService service1 = UserFactory.getUserService();

			int i = scanner.nextInt();
			switch (i) {

			case 1:

				do {
					try {
						System.out.println("Enter Id");
						regId = scanner.nextInt();

						validation.validatedId(regId);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Id should contain only 2 digits");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {
						System.out.println("Enter Name");
						regName = scanner.next();
						validation.validatedName(regName);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Name should contains only Alphabates");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {

						System.out.println("Enter Email");
						regEmail = scanner.next();
						validation.validatedEmail(regEmail);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Email should be in proper format");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				
				/*
				 * System.out.println("Enter Password"); regPassword = scanner.next();
				 */

				do {
					try {
						System.out.println("Enter Password :");
						regPassword = scanner.next();
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Enter correct Password ");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				
				do {
					try {
						System.out.println("Enter Mobile");
						regMobile = scanner.nextLong();

						validation.validatedMobile(regMobile);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Mobile Number should contain exact 10 digits");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				System.out.println("Enter Role");
				String regRole = scanner.next();

				UserBean userBean = new UserBean();
				userBean.setId(regId);
				userBean.setName(regName);
				userBean.setEmail(regEmail);
				userBean.setPassword(regPassword);
				userBean.setMobile(regMobile);
				userBean.setRole(regRole);
				try {
					boolean check = service1.register(userBean);
					if (check == false) {
						System.out.println("Email already exists");
					} else {
						System.out.println("Registered successfully");
					}
				} catch (Exception e) {
					System.out.println("Invalid");
				}
				break;

			case 2:

				do {
					try {
						System.out.println("Enter Email");
						email = scanner.next();

						validation.validatedEmail(email);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Email should be in proper format");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {
						System.out.println("Enter Password");
						password = scanner.next();

						validation.validatedEmail(password);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Enter correct password");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				try {
					UserBean auth = service1.auth(email, password);

					if (auth.getRole().equalsIgnoreCase("admin")) {

						admin();

					} else if (auth.getRole().equalsIgnoreCase("student")) {
						student();
					}

					else {
						System.out.println("Invalid Email or Password");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}

				break;
			}
		} while (true);
	}

	public static void admin() {

		AdminService service = AdminFactory.getAdminService();

		Scanner scanner = new Scanner(System.in);

		do {
			System.out.println("Press 1 to Add Books");
			System.out.println("Press 2 to Remove Books");
			System.out.println("Press 3 to Issue book");
			System.out.println("Press 4 to Main");

			LibraryManagementValidation validation = new LibraryManagementValidation();

			boolean flag = false;
			int bookId = 0;
			String bookTitle = null;
			String category = null;
			String author = null;
			String PubName = null;

			int book_Id = 0;

			int stId = 0;
			int issuedId = 0;

			int choice1 = scanner.nextInt();
			switch (choice1) {

			case 1:

				do {
					try {
						System.out.println("Enter Book Id");
						bookId = scanner.nextInt();
						validation.validatedId(bookId);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Id should contain only 2 digits");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {
						System.out.println("Enter Book Title");
						bookTitle = scanner.next();
						validation.validatedName(bookTitle);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Title name should contains only Alphabates");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {
						System.out.println("Enter Category");
						category = scanner.next();
						validation.validatedName(category);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Book Category should contains only Alphabates");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {
						System.out.println("Enter Author");
						author = scanner.next();
						validation.validatedName(author);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Author name should contains only Alphabates");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {
						System.out.println("Enter Publisher Name");
						PubName = scanner.next();
						validation.validatedName(PubName);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Name should contains only Alphabates");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				System.out.println("Enter number of copies");
				int copies = scanner.nextInt();

				BookBean bean = new BookBean();

				bean.setBookId(bookId);
				bean.setBook_title(bookTitle);
				bean.setCategory(category);
				bean.setAuthor(author);
				bean.setPublisher_name(PubName);
				bean.setCopies(copies);

				boolean check = service.addBook(bean);
				if (check == false) {
					System.out.println("Book already exists");
				} else {
					System.out.println("Book is added successfully");
				}
				break;

			case 2:

				do {
					try {
						System.out.println("Enter Book_Id");
						book_Id = scanner.nextInt();
						validation.validatedId(book_Id);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Id should contain only 2 digits");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				if (book_Id == 0) {
					System.out.println("Enter the Valid Book Id");
				} else {
					BookBean bean1 = new BookBean();

					bean1.setBookId(book_Id);
					boolean remove = service.remove(book_Id);
					if (remove == false) {
						System.out.println("Book is not removed");
					} else {
						System.out.println("Book is removed successfully");
					}
				}
				break;

			case 3:

				do {
					try {
						System.out.println("Enter Student Id");
						stId = scanner.nextInt();
						validation.validatedId(stId);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Id should contain only 2 digits");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				do {
					try {
						System.out.println("Enter Book Id");
						issuedId = scanner.nextInt();
						validation.validatedId(issuedId);
						flag = true;
					} catch (InputMismatchException e) {
						flag = false;
						System.err.println("Id should contain only 2 digits");
					} catch (LibraryManagementException e) {
						flag = false;
						System.err.println(e.getMessage());
					}
				} while (!flag);

				boolean check1 = service.issueBook(stId, issuedId);
				if (check1) {
					System.out.println("Book Issued successfully");
				} else {
					System.out.println("Book is not issued");
				}
				break;

			case 4:
				doReg();
			}
		} while (true);
	}

	public static void student() {

		boolean flag = false;
		int reqBook = 0;
		int stuId1 = 0;

		int id = 0;

		int stuId = 0;
		int book_id = 0;

		LibraryManagementValidation validation = new LibraryManagementValidation();

		Scanner scanner = new Scanner(System.in);
		StudentService service2 = StudentFactory.getStudentService();

		do {
			try {
				System.out.println("Press 1 to Request book");
				System.out.println("Press 2 to Search Book by Id");
				System.out.println("Press 3 to Return book");
				System.out.println("Press 4 to main");

				int choice2 = scanner.nextInt();

				switch (choice2) {

				case 1:

					do {
						try {
							System.out.println("Enter Book Id");
							reqBook = scanner.nextInt();
							validation.validatedId(reqBook);
							flag = true;
						} catch (InputMismatchException e) {
							flag = false;
							System.err.println("Id should contain only 2 digits");
						} catch (LibraryManagementException e) {
							flag = false;
							System.err.println(e.getMessage());
						}
					} while (!flag);

					do {
						try {
							System.out.println("Enter Student Id");
							stuId1 = scanner.nextInt();
							validation.validatedId(stuId1);
							flag = true;
						} catch (InputMismatchException e) {
							flag = false;
							System.err.println("Id should contain only 2 digits");
						} catch (LibraryManagementException e) {
							flag = false;
							System.err.println(e.getMessage());
						}
					} while (!flag);

					boolean book = service2.req(stuId1, reqBook);
					if (book == true) {
						System.out.println("Requested successfully");
					} else {
						System.out.println("Sorry, no book available for your request");
					}
					break;

				case 2:

					do {
						try {
							System.out.println("Enter Book Id");
							id = scanner.nextInt();
							validation.validatedId(id);
							flag = true;
						} catch (InputMismatchException e) {
							flag = false;
							System.err.println("Id should contain only 2 digits");
						} catch (LibraryManagementException e) {
							flag = false;
							System.err.println(e.getMessage());
						}
					} while (!flag);

					BookBean bean2 = new BookBean();
					bean2.setBookId(id);
					BookBean list2 = service2.searchBookType(id);
					if (list2 != null) {
						System.out.println(list2.getBookId());
						System.out.println(list2.getBook_title());
						System.out.println(list2.getAuthor());
						System.out.println(list2.getCategory());
						System.out.println(list2.getCopies());
						System.out.println(list2.getPublisher_name());
						// System.out.println(list2);
					} else {
						System.out.println("Sorry, no book available for your request");
					}
					break;

				case 3:

					do {
						try {
							System.out.println("Enter Student Id");
							stuId = scanner.nextInt();
							validation.validatedId(stuId);
							flag = true;
						} catch (InputMismatchException e) {
							flag = false;
							System.err.println("Id should contain only 2 digits");
						} catch (LibraryManagementException e) {
							flag = false;
							System.err.println(e.getMessage());
						}
					} while (!flag);

					do {
						try {
							System.out.println("Enter Book Id");
							book_id = scanner.nextInt();
							validation.validatedId(book_id);
							flag = true;
						} catch (InputMismatchException e) {
							flag = false;
							System.err.println("Id should contain only 2 digits");
						} catch (LibraryManagementException e) {
							flag = false;
							System.err.println(e.getMessage());
						}
					} while (!flag);

					boolean returnBook = service2.returnBook(stuId, book_id);
					if (returnBook) {
						System.out.println("Book returned successfully");
					} else {
						System.out.println("Book not returned");
					}
					break;

				case 4:
					doReg();
				}
			} catch (Exception e) {
				System.out.println("Invalid Credentials");
			}
			// break;
		} while (true);
	}
}
