package com.capgemini.librarymanagementsystemhibernate.dao;

import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;

import com.capgemini.librarymanagementsystemhibernate.dto.BookBean;
import com.capgemini.librarymanagementsystemhibernate.dto.BookIssueDetails;

public class AdminDAOImp implements AdminDAO {

	@Override
	public boolean addBook(BookBean info) {
		EntityManagerFactory factory = null;
		EntityManager manager = null;
		EntityTransaction transaction = null;

		boolean isBookAdded = false;
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			manager.merge(info);
			isBookAdded = true;
			transaction.commit();

		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		manager.close();
		factory.close();
		return isBookAdded;
	}

	@Override
	public boolean remove(int bookId) {
		EntityManagerFactory factory = null;
		EntityManager manager = null;
		EntityTransaction transaction = null;
		boolean del = false;
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			BookBean record = manager.find(BookBean.class, bookId);
			if (manager.contains(record)) {
				del = true;
				manager.remove(record);
				System.out.println("Record removed");
			} else {
				del = false;
				System.out.println("Record not found");
			}

			transaction.commit();
		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		manager.close();
		factory.close();
		return del;
	}

		@Override
	public boolean issueBook(int id, int bookId) {
		EntityManagerFactory factory = null;
		EntityManager manager = null;
		EntityTransaction transaction = null;
	//	BookIssueDetails bId = new BookIssueDetails();
		try {
			factory = Persistence.createEntityManagerFactory("TestPersistence");
			manager = factory.createEntityManager();
			transaction = manager.getTransaction();
			transaction.begin();
			Query query1 = manager.createQuery("select b from BookBean b where b.bookId = :bbookId and b.copies>=1");
			Query query2 = query1.setParameter("bbookId", bookId);
		//	List count = query2.getResultList();
			System.out.println(count);
			int size = count.size();
			if (size >= 1) {
				Query q1 = manager.createQuery("select r from RequestBook r where r.id = :id and r.reqBookPK.bookId = :bookId");
				q1.setParameter("id", id);
				q1.setParameter("bookId", bookId);
				List count1 = q1.getResultList();
				int z = count1.size();
				System.out.println(z);
				if (z >= 1) {
					Query query3 = manager.createQuery("select count(id) as idCount from BorrowedBookBean b where id=:id");
					query3.setParameter("id", id);
					List count2 = query3.getResultList();
					int z1 = count2.size();
					if (z1 >= 1) {
						int noOfBooksBorrowed = count2.indexOf(0);
						if (noOfBooksBorrowed < 3) {
							SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
							LocalDate date = LocalDate.now();
							Calendar c = Calendar.getInstance();
							c.setTime(new java.util.Date());
							c.add(Calendar.DATE, 15);
							String date1 = sdf.format(c.getTime());
							Query userEmail = manager.createQuery("select u.email from UserBean u  where id = :id");
							userEmail.setParameter("id", id);
							List userEmail1 = userEmail.getResultList();
							Query query4 = manager.createNativeQuery("insert into bookissue1 (id,bookId,email,issueDate,returnDate) values (? , ? , ? , ? , ?) ");
							query4.setParameter(1, id);
							query4.setParameter(2, bookId);
							query4.setParameter(3, userEmail1.get(0));
							query4.setParameter(4, date);
							query4.setParameter(5, date1);
							int count3 = query4.executeUpdate();
							if (count3 != 0) {
								Query userEmail4 = manager.createQuery("select u.email from UserBean u where id = :id");
								userEmail4.setParameter("id", id);
								List userEmail44 = userEmail4.getResultList();
								Query query5 = manager.createNativeQuery("insert into borrowbook1 (id,bookId,email) values (?,?,?)");
								query5.setParameter(1, id);
								query5.setParameter(2, bookId);
								query5.setParameter(3, userEmail44.get(0));
								query5.executeUpdate();

								Query query6 = manager.createQuery("delete from RequestBook r where r.id = :id and r.reqBookPK.bookId = :bookId");
								query6.setParameter("id", id);
								query6.setParameter("bookId", bookId);
								query6.executeUpdate();
								Query query7 = manager.createQuery("update BookBean b set b.copies = b.copies-1 where b.bookId = :bookId");
								query7.setParameter("bookId", bookId);
								query7.executeUpdate();
								transaction.commit();
								return true;
							}

						}
					}
				}

			}

		} catch (Exception e) {
			e.printStackTrace();
			transaction.rollback();
		}
		manager.close();
		factory.close();

		return false;
	}
}
